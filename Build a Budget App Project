class Category:
    def __init__(self, name):
        self.name = name
        self.ledger = []

    def deposit(self, amount, description=""):
        self.ledger.append({"amount": amount, "description": description})

    def withdraw(self, amount, description=""):
        if self.check_funds(amount):
            self.ledger.append({"amount": -amount, "description": description})
            return True
        return False

    def get_balance(self):
        return sum(item["amount"] for item in self.ledger)

    def transfer(self, amount, other_category):
        if self.check_funds(amount):
            self.withdraw(amount, f"Transfer to {other_category.name}")
            other_category.deposit(amount, f"Transfer from {self.name}")
            return True
        return False

    def check_funds(self, amount):
        return amount <= self.get_balance()

    def __str__(self):
        title = self.name.center(30, "*") + "\n"
        items = ""

        for item in self.ledger:
            description = item["description"][:23].ljust(23)
            amount = "{:.2f}".format(item["amount"]).rjust(7)
            items += f"{description}{amount}\n"

        total = "Total: {:.2f}".format(self.get_balance())
        return title + items + total

def create_spend_chart(categories):
    # Calculate total spending per category
    total_spent = sum(
        sum(item["amount"] for item in cat.ledger if item["amount"] < 0)
        for cat in categories
    )

    # Avoid division by zero
    if total_spent == 0:
        percentages = [0 for _ in categories]
    else:
        percentages = [
            int(sum(item["amount"] for item in cat.ledger if item["amount"] < 0) / total_spent * 100 // 10 * 10)
            for cat in categories
        ]

    # Build the chart
    chart = "Percentage spent by category\n"

    # Add the bars
    for percent in range(100, -1, -10):
        chart += str(percent).rjust(3) + "| "
        for pct in percentages:
            chart += "o  " if pct >= percent else "   "
        chart += "\n"

    # Add the horizontal line
    chart += "    " + "-" * (3 * len(categories) + 1) + "\n"

    # Find the longest category name
    max_length = max(len(cat.name) for cat in categories)

    # Print category names vertically
    for i in range(max_length):
        chart += "     "  # Indentation
        for cat in categories:
            chart += (cat.name[i] + "  ") if i < len(cat.name) else "   "
        if i < max_length - 1:
            chart += "\n"

    return chart
